@import "variable";
@import "mixinRwd";
@import "mixinFunction";
body,
div,
dl,
dt,
dd,
ul,
ol,
li,
h1,
h2,
h3,
h5,
h6,
pre,
code,
form,
fieldset,
legend,
input,
textarea,
p,
span,
label blockquote,
th,
td,
select {
    font-family: var(--font_family_sans_serif);
}

body {
    background: var(--bg_gary);
    line-height: 1.2;
    * {
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        letter-spacing: .5px;
        line-height: 1.3;
        letter-spacing: 1.5px;
    }
     ::after,
     ::before {
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }
}

.body_hidden {
    overflow: hidden !important;
    scroll-behavior: none;
    overflow-y: hidden;
}

img {
    margin: auto;
    max-width: 100%;
}

input[type="text"],
input[type="password"],
input[type="email"],
input[type="tel"],
input[type="search"],
input[type="url"],
input[type="number"],
input[type="file"],
input[type="date"],
select,
textarea {
    -moz-appearance: none;
    -webkit-appearance: none;
    -ms-appearance: none;
    appearance: none;
    background: var(--white);
    display: inline-block;
    outline: 0;
    text-decoration: none;
    width: 100%;
    color: var(--text_black);
}

select {
    -moz-appearance: auto;
    -webkit-appearance: auto;
    -ms-appearance: auto;
    appearance: auto;
}

button {
    outline: none;
    cursor: pointer;
    &:disabled {
        pointer-events: none;
    }
}

.form_control.selector:disabled,
.form_control.selector[readonly] {
    background-color: var(--white);
}

table {
    th,
    td {
        text-align: inherit;
    }
}

.text_center {
    text-align: center;
}

.text_right {
    text-align: right;
}

.text_left {
    text-align: left;
}

.text_nowrap {
    white-space: nowrap;
}

.word_bk_all {
    word-break: break-all;
}

.f_24 {
    font-size: $text_xxl;
}

.f_22 {
    font-size: $text_xg;
}

.f_20 {
    font-size: $text_xl;
}

.f_18 {
    font-size: $text_lg;
}

.f_16 {
    font-size: $text_ml;
}

.f_15 {
    font-size: $text_mg;
}

.f_14 {
    font-size: $text_md;
}

.f_13 {
    font-size: $text_sm;
}

.f_12 {
    font-size: $text_ss;
}

.flex_box {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

.flex_warp {
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
}

.flex_align_center {
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
}

.flex_cont_center {
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
}

.flex_cont_end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end;
    -webkit-box-align: end;
    -ms-flex-align: end;
    align-items: end;
}

.flex_equally {
    -webkit-box-flex: 1;
    -ms-flex: 1;
    flex: 1;
}

.flex_between {
    -webkit-box-pack: space-between;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
}

.flex_fill {
    -ms-flex: 1 1 auto;
    -webkit-box-flex: 1;
    flex: 1 1 auto;
}

.flex_row {
    -webkit-box-orient: horizontal;
    -ms-flex-direction: row;
    flex-direction: row;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-box-direction: normal;
    -webkit-box-align: initial;
    -ms-flex-align: initial;
    align-items: initial;
}

.flex_dire {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -webkit-flex-direction: column;
    -moz-box-orient: vertical;
    -moz-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
}

.cur_pointer {
    cursor: pointer;
}

.f_weight {
    font-weight: bolder;
}

.form_group {
    margin-bottom: .5rem;
}

.form_label {
    padding-top: calc(0.375rem + 1px);
    padding-bottom: calc(0.375rem + 1px);
    margin-bottom: 0;
    font-size: inherit;
    line-height: 1.2;
    display: inline-block;
}

a {
    color: inherit;
    text-decoration: none;
}

a:hover {
    color: inherit;
    text-decoration: none;
}

.d_none {
    display: none;
}

.pointer_none {
    pointer-events: none !important;
}

.pos_relat {
    position: relative;
}

.pos_absolute {
    position: absolute;
}

.align_middle {
    vertical-align: middle !important;
}

.d_inline_block {
    display: inline-block !important;
}

//btn style
.btn {
    &:focus {
        box-shadow: none;
    }
}

.mybtn {
    // 結構
    display: inline-block;
    padding: 7px 14px;
    margin-bottom: 0;
    font-size: $button_font_md;
    text-align: center;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    background-image: none;
    border: none;
    @include border_radius(5px);
    &:hover,
    &:focus {
        color: $buttonColor_white;
        // background-color: $buttonBg_orange;
        box-shadow: none;
        opacity: .85;
    }
    &[disabled] {
        cursor: not-allowed;
        // filter: alpha(opacity=75);
        filter: alpha(opacity=80);
        -webkit-box-shadow: none;
        box-shadow: none;
        opacity: .85;
        pointer-events: none;
    }
}

.mybtn_xs {
    padding: 3px 12px;
    font-size: 13px;
}

//badge
.badge {
    display: inline-block;
    padding: .25em .4em;
    line-height: 1;
    @include border_radius(.25rem);
}

@each $name,
$value in $btn_config {
    $class: map-get($value, class);
    $color: map-get($value, color);
    $bg: map-get($value, bg);
    $border-color: map-get($value, border-color);
    .mybtn_#{$class} {
        @include button_variant($color, $bg, $border-color);
        // @include button_variant($color, $bg);
    }
    //  badge 部分 start
    .badge_#{$class} {
        @include badge_variant($color, $bg);
    }
    //background
    .bg_#{$class} {
        @include bg_variant($bg);
    }
    .font_#{$class} {
        @include font_variant($bg);
    }
}

.mybtn.disabled,
.mybtn[disabled],
fieldset[disabled] .mybtn {
    cursor: not-allowed !important;
    filter: alpha(opacity=85);
    opacity: .85;
    pointer-events: none;
    // background-image: linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.1) 50%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.15));
}